name: Network Connectivity Tests
on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
permissions:
  issues: write
jobs:
  test-connectivity:
    runs-on: ubuntu-latest
    steps:
      - name: Run Connectivity Tests
        id: tests
        run: |
          # Allow commands to fail without exiting the script
          set +e
          
          failed_services=()
          
          # Test SFTP Connection
          echo "Testing SFTP Connection..."
          output=$(nc -zv -w 3 test.rebex.net 22 2>&1)
          exit_code=$?
          echo "nc exit code: $exit_code"
          echo "Complete output: $output"
          
          if [ $exit_code -ne 0 ] || ! echo "$output" | grep -q "Connection.*succeeded"; then
            echo "SFTP connection test failed"
            echo "Error: $output"
            failed_services+=("SFTP demo site")
          else
            echo "SFTP connection test passed"
          fi
          
          # Test HTTPS Connection
          echo "Testing HTTPS Connection..."
          output=$(curl -sk https://www.nestorurquiza.com 2>&1)
          exit_code=$?
          echo "Curl exit code: $exit_code"
          echo "Complete output: $output"
          
          if [ $exit_code -ne 0 ] || ! echo "$output" | grep -q "Nestor has worked as Independent Consultant helping several companies with strategy alignment"; then
            echo "HTTPS connection test failed"
            echo "Error: $output"
            failed_services+=("Personal site")
          else
            echo "HTTPS connection test passed"
          fi
          
          # Store failed services in output
          echo "failed_services=${failed_services[*]}" >> "$GITHUB_OUTPUT"
          
          # If any service failed, exit with failure
          if [ ${#failed_services[@]} -gt 0 ]; then
            echo "Failed services: ${failed_services[*]}"
            set -e
            exit 1
          fi

      - name: Create GitHub Issue on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const failedServices = '${{ steps.tests.outputs.failed_services }}'.split(' ');
            const services = failedServices.join(' and ');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `${services} Connection Test Failed`,
              body: `${services} connectivity test failed at ${new Date().toISOString()}`
            });

      - name: Send Email Notification on Failure
        if: failure()
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        run: |
          # Get failed services from test step output
          SERVICES="${{ steps.tests.outputs.failed_services }}"
          SERVICES=$(echo "$SERVICES" | sed 's/ / and /g')
          
          # Build the subject and body
          SUBJECT="$SERVICES Connection Test Failed"
          BODY="$SERVICES connectivity test failed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Send email using SendGrid API
          curl --request POST \
              --url https://api.sendgrid.com/v3/mail/send \
              --header "Authorization: Bearer $SENDGRID_API_KEY" \
              --header 'Content-Type: application/json' \
              --data "{
                  \"personalizations\": [{
                      \"to\": [
                          {\"email\": \"nestor.urquiza+1@gmail.com\"},
                          {\"email\": \"nestor.urquiza+2@gmail.com\"}
                      ]
                  }],
                  \"from\": {\"email\": \"donotreply@nestorurquiza.net\"},
                  \"subject\": \"$SUBJECT\",
                  \"content\": [{
                      \"type\": \"text/plain\",
                      \"value\": \"$BODY\"
                  }]
              }"
